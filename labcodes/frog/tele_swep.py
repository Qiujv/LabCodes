"""Process teleportation tomo datas generated by swep experiments instead of single shot results."""

import logging
from typing import Literal, Union

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import labcodes.frog.tele_state as ts
import labcodes.frog.pyle_tomo as tomo
from labcodes import fileio, misc, plotter

logger = logging.getLogger(__name__)

class qpt_tele_state:
    """For state teleportation qpt data.
    
    >>> lf = fileio.read_labrad('//XLD2-PC2/labRAD_data/crab.dir/230716.dir/230807_245_tele_fb.dir', 433)
    >>> qpt = qpt_tele_state(lf, 'fb')
    >>> qpt.plot_chi_4x2()
    <Figure size 1400x800 with 9 Axes>
    """
    def __init__(self, lf:fileio.LogFile, kind: Literal['fb', 'ps'] = None):
        self.lf = lf
        df = lf.df
        if 'run' not in df: df['run'] = 0  # For data with only one run.
        complete_runs = []
        for run in df['run'].unique():
            if len(df.query(f'run == {run}')) == 12:
                complete_runs.append(run)
        self.df = df.query(f'run in {complete_runs}')

        self.selects = ['00', '01', '10', '11']
        self.rho_in = ts.rho_in
        self._rho = {select: {} for select in self.selects}
        self._chi = {select: {} for select in self.selects}

        if kind is None:
            title = self.lf.name.title.lower()
            if '_ps' in title or '(ps)' in title:
                kind = 'ps'
            else:
                kind = 'fb'
        
        if kind == 'ps':
            self.rho_ideal = ts.rho_out_ideal_ps
            self.chi_ideal = ts.chi_ideal_ps
        elif kind == 'fb':
            self.rho_ideal = ts.rho_out_ideal_fb
            self.chi_ideal = ts.chi_ideal_fb
        else:
            raise ValueError(f'kind {kind} not recognized')
        
        try:
            self.constuct_all()
        except:
            logger.exception(f'failed to construct rho and chi for {self.lf.name}')

    def rho(
        self, 
        run: Union[int, Literal['mean', 'ideal']] = 0, 
        init_state: Literal['0', 'x', 'y', '1'] = '0', 
        select: Literal['00', '01', '10', '11'] = '00',
    ) -> np.ndarray:
        if run in self._rho[select]:
            if init_state in self._rho[select][run]:
                return self._rho[select][run][init_state]
            
        if run == 'mean':
            return np.mean([self.rho(run, init_state, select) 
                            for run in self.df['run'].unique()], axis=0)
        
        if run == 'ideal':
            return self.rho_ideal[select][init_state]
            
        init_state = '0xy1'.index(init_state)
        tomo_op = [0, 1, 2]  # "I", "X/2", "Y/2"

        probs = self.df.query(f'run == {run} & init_state == {init_state}')
        probs = probs.set_index('tomo_op').loc[tomo_op, [f'p{select}0', f'p{select}1']]
        p_select = probs.sum(axis='columns')
        probs = probs.divide(p_select, axis='index')
        return tomo.qst(probs.values, 'tomo')

    def chi(
        self, 
        run: Union[int, Literal['mean', 'ideal']] = 0, 
        select: Literal['00', '01', '10', '11'] = '00',
    ) -> np.ndarray:
        if run in self._chi[select]:
            return self._chi[select][run]
        
        if run == 'mean':
            return np.mean([self.chi(run, select) 
                            for run in self.df['run'].unique()], axis=0)
        
        if run == 'ideal':
            return self.chi_ideal[select]
        
        return tomo.qpt(
            [ts.rho_in[init] for init in '0xy1'],
            [self.rho(run, init, select) for init in '0xy1'],
            'sigma',
        )
    
    def constuct_all(self) -> None:
        for run in self.df['run'].unique():
            if len(self.df.query(f'run == {run}')) != 12:
                logger.warning(f'run {run} does not have 12 tomo points')
                continue
            for select in self.selects:
                rho = {init: self.rho(run, init, select) for init in '0xy1'}
                self._rho[select][run] = rho
                chi = self.chi(run, select)
                self._chi[select][run] = chi

    @property
    def Frho(self) -> pd.DataFrame:
        records = []
        for run in self.df['run'].unique():
            for select in self.selects:
                rec = {'run': run, 'select': select}
                for init in '0xy1':
                    rec[f'F{init}'] = ts.fidelity(
                        self.rho(run, init, select),
                        self.rho_ideal[select][init.lower()],
                    )
                records.append(rec)
        return pd.DataFrame.from_records(records)
    
    @property
    def Fchi(self) -> pd.DataFrame:
        records = []
        for run in self.df['run'].unique():
            for select in self.selects:
                rec = {'run': run, 'select': select}
                rec['Fchi'] = ts.fidelity(self.chi(run, select),
                                          self.chi_ideal[select])
                records.append(rec)
        return pd.DataFrame.from_records(records)
    
    @property
    def fname(self) -> fileio.LogName:
        fname = self.lf.name.copy()
        fname.title = fname.title + f' Fchi_mean={self.Fchi["Fchi"].mean():.2%}'
        return fname
    
    def dump_chi_mean(self, fname: str = 'chi_exp.json'):
        chi_mean = {select: self.chi('mean', select) for select in self.selects}
        chi_mean['id'] = self.lf.name.id
        return fileio.data_to_json(chi_mean, fname)

    def plot_chi_4x2(self, run: Union[int, Literal['mean', 'ideal']] = 'mean') -> plt.Figure:
        chi_dict = {select: self.chi(run, select) for select in self.selects}

        fig = plt.figure(figsize=(14,8), tight_layout=False)
        for i, (select, mat) in enumerate(chi_dict.items()):
            ax_r:plt.Axes = fig.add_subplot(2, 4, 2*i+1, projection='3d')
            ax_i:plt.Axes = fig.add_subplot(2, 4, 2*i+2, projection='3d')
            plotter.plot_complex_mat3d(mat, [ax_r, ax_i], cmin=-1, cmax=1, colorbar=False)
            # Ok for run=='mean' because `fid` is linear.
            fid = ts.fidelity(mat, self.chi_ideal[select])
            ax_r.set_title(f'select={select}, Fchi={fid:.2%}')
            ax_r.collections[0].set_linewidth(0.2)
            ax_r.set_xticklabels('IXYZ')
            ax_r.set_yticklabels('IXYZ')
            ax_i.collections[0].set_linewidth(0.2)
            ax_i.set_xticklabels('IXYZ')
            ax_i.set_yticklabels('IXYZ')

        cax = fig.add_axes([0.4, 0.5, 0.2, 0.01])
        fig.colorbar(ax_r.collections[0], cax=cax, orientation='horizontal')
        fig.suptitle(self.fname.as_plot_title(width=100))
        return fig
    
    def plot_chi(self, run: Union[int, Literal['mean', 'ideal']] = 'mean') -> plt.Figure:
        chi_dict = {select: self.chi(run, select) for select in self.selects}
        fig, axs = plt.subplots(ncols=4, nrows=2, figsize=(8, 5), sharex=True, sharey=True)
        for i, (select, mat) in enumerate(chi_dict.items()):
            ax_r = axs.ravel()[2*i]
            ax_i = axs.ravel()[2*i+1]
            plotter.plot_mat(mat.real, .2, -.2, ax=ax_r, vary_size=True, fmt='{:.1%}'.format, omit_below=3e-3)
            plotter.plot_mat(mat.imag, .2, -.2, ax=ax_i, vary_size=True, fmt='{:.1%}'.format, omit_below=3e-3)
            fid = misc.fidelity(mat, self.chi_ideal[select])
            ax_r.set_title(f'select={select}, Fchi={fid:.2%}')
        ax_r.set_xticks(range(4))
        ax_r.set_yticks(range(4))
        ax_r.set_xticklabels([])
        ax_r.set_yticklabels('IXYZ')
        fig.suptitle(self.fname.as_plot_title(width=100))
        return fig
    
    def plot_rho(self, run: Union[int, Literal['mean', 'ideal']] = 'mean') -> plt.Figure:
        fig = plt.figure(figsize=(10, 5), layout='constrained')
        subfigs = fig.subfigures(ncols=4, nrows=1, wspace=0.02)
        for ic, select in enumerate(self.selects):
            subfig = subfigs[ic]
            fchi = misc.fidelity(self.chi(run, select), self.chi_ideal[select])
            subfig.suptitle(f'select={select}, Fchi={fchi:.2%}')
            axs = subfig.subplots(ncols=2, nrows=4, sharex=True, sharey=True, gridspec_kw=dict(wspace=0))
            for ir, init in enumerate('0xy1'):
                ax_r = axs[ir, 0]
                ax_i = axs[ir, 1]
                mat = self.rho(run, init, select)
                plotter.plot_mat(mat.real, .5, -.5, ax=ax_r, vary_size=True, fmt='{:.1%}'.format, omit_below=3e-3)
                plotter.plot_mat(mat.imag, .5, -.5, ax=ax_i, vary_size=True, fmt='{:.1%}'.format, omit_below=3e-3)
                fid = misc.fidelity(mat, self.rho_ideal[select][init])
                ax_r.set_ylabel(f'init={init},\nFrho={fid:.2%}')
            ax_r.set_xticks([])
        fig.suptitle(self.fname.as_plot_title(width=100))
        return fig
    
    def plot_fidelity(self) -> plt.Figure:
        df = pd.concat(
            [self.Fchi.set_index(['run', 'select']), 
            self.Frho.set_index(['run', 'select'])],
            axis='columns',
        ).reset_index()

        fig, axs = plt.subplots(nrows=5, sharex=True, figsize=(6,6))
        def plot_panel(ax:plt.Axes, df:pd.DataFrame, yname:str):
            ax.plot('run', yname, data=df.query('select=="00"'), label='00')
            ax.plot('run', yname, data=df.query('select=="01"'), label='01')
            ax.plot('run', yname, data=df.query('select=="10"'), label='10')
            ax.plot('run', yname, data=df.query('select=="11"'), label='11')
            ymean = df[yname].mean()
            plotter.cursor(ax=ax, y=ymean, text=f'{ymean:.2%}', text_style=dict(ha='right'))
            ax.set_ylabel(yname)
        plot_panel(axs[0], df, 'Fchi')
        plot_panel(axs[1], df, 'F0')
        plot_panel(axs[2], df, 'Fx')
        plot_panel(axs[3], df, 'Fy')
        plot_panel(axs[4], df, 'F1')
        axs[0].legend(ncols=4, loc='upper left')
        axs[-1].set_xlabel('run')
        fig.suptitle(self.fname.as_plot_title())
        return fig
